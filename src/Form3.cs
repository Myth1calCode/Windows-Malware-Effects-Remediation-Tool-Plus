using System;
using Microsoft.Win32;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using System.Diagnostics;

namespace Windows_Malware_Effects_Remediation_Tool
{
    public partial class Form3 : Form
    {
        [DllImport("ntdll.dll", SetLastError = true)]
        private static extern int NtSetInformationProcess(IntPtr hProcess, int processInformationClass, ref int processInformation, int processInformationLength);
        public Form3()
        {
            InitializeComponent();
            this.CenterToScreen();
        }

        private void criticalProcessSubmit_Click(object sender, EventArgs e)
        {
            try 
            {
                var process = int.Parse(textBox1.Text);
                int isCritical = 0;
                int BreakOnTermination = 0x1D;
                Process.EnterDebugMode();
                NtSetInformationProcess(Process.GetProcessById(process).Handle, BreakOnTermination, ref isCritical, sizeof(int));
                if (checkBox1.Checked == true)
                {
                    Process.GetProcessById(process).Kill();
                    MessageBox.Show("Successfully stripped the critical process property and terminated the process \"" + Process.GetProcessById(process).ProcessName+".exe\"", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else
                {
                    MessageBox.Show("Successfully stripped the critical process property of process \"" + Process.GetProcessById(process).ProcessName+".exe\"", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            } catch
            {
                MessageBox.Show("Error applying the requested operation(s). Check that the process ID you entered is valid or if I have sufficient permissions.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            
        }
    }
}
