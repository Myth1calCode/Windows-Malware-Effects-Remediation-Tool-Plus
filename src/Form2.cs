using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Windows_Malware_Effects_Remediation_Tool
{
    public partial class Form2 : Form
    {
        public Form2()
        {
            InitializeComponent();
            panel1.Hide();
            goodToGo.Hide();
            Main2();
        }
        private async void Main2()
        {
            var registryeditorcheck = "false";
            var taskmanagercheck = "false";
            var commandpromptcheck = "false";
            var uaccheck = "false";
            var exeiconscheck = "false";
            var txticonscheck = "false";
            var shellkeycheck = "false";
            var userinitkeycheck = "false";
            string[] listofthingstorepair = { };



            fixList.Items.Clear();
            //Registry Editor Check
            try
            {
                RegistryKey checkregistryeditor = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System");
                if ((int)checkregistryeditor.GetValue("DisableRegistryTools") == 1)
                {
                    fixList.Items.Add("Re-enable Registry Editor");
                }
            } 
            catch{}



            //Task Manager Check 
            try
            {
                RegistryKey checktaskmanager = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System");
                if ((int)checktaskmanager.GetValue("DisableTaskMgr") == 1)
                {
                    fixList.Items.Add("Re-enable Task Manager");
                }
            }
            catch {}


            //Command Prompt Check
            try
            {
                RegistryKey checkcmd = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Policies\Microsoft\Windows\System");
                if((int)checkcmd.GetValue("DisableCMD") != 0)
                {
                    fixList.Items.Add("Re-enable Command Prompt");
                }
            } catch {}



            //User Account Control Check
            try
            {
                RegistryKey checkuac = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System");
                if((int)checkuac.GetValue("EnableLUA") == 0 || (int)checkuac.GetValue("ConsentPromptBehaviorUser") == 0 || (int)checkuac.GetValue("ConsentPromptBehaviorAdmin") == 0)
                {
                    fixList.Items.Add("Re-enable User Account Control");
                }
            } catch {}



            //Exe icons check
            try
            {
                RegistryKey checkexeicons = Registry.ClassesRoot.OpenSubKey(@"exefile\DefaultIcon");
                if((string)checkexeicons.GetValue("") != "%1")
                {
                    fixList.Items.Add("Reset exe icons");
                }
            }
            catch {}



            //Txt icons check
            try
            {
                RegistryKey checktxticons = Registry.ClassesRoot.OpenSubKey(@"txtfile\DefaultIcon");
                if((string)checktxticons.GetValue("") != @"%systemroot%\system32\imageres.dll,-102")
                {
                    fixList.Items.Add("Reset txt icons");
                }
            }
            catch {}



            //Shell key check
            try
            {
                RegistryKey checkshellkey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon");
                if((string)checkshellkey.GetValue("Shell") != "explorer.exe")
                {
                    fixList.Items.Add("Reset Shell key");
                }
            }
            catch {}



            //Userinit key check
            try
            {
                RegistryKey checkuserinitkey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon");
                if((string)checkuserinitkey.GetValue("Userinit") != @"C:\Windows\System32\userinit.exe,")
                {
                    fixList.Items.Add("Reset Userinit key");
                }
            }
            catch {}



            //Add stuff to checkboxlist
            await Delay(5000); //time waster until i find a way to add an actual loading screen
            if(fixList.Items.Count == 0)
            {
                goodToGo.Show();
                applyFix.Enabled = false;
            }
            panel1.Show();
        }
        private async Task Delay(int howlong)
        {
            await Task.Delay(howlong);
        }

        private void applyFix_Click(object sender, EventArgs e)
        {

        }

        private void fixList_SelectedIndexChanged(object sender, EventArgs e)
        {

        }
    }
}
