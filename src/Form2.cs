using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Windows_Malware_Effects_Remediation_Tool
{
    public partial class Form2 : Form
    {
        [DllImport("user32")]
        public static extern IntPtr GetSystemMenu(IntPtr hWnd, bool bRevert);

        [DllImport("user32")]
        public static extern bool EnableMenuItem(IntPtr hMenu, uint itemId, uint uEnable);
        public static bool registryEditorDone = false;
        public static bool taskManagerDone = false;
        public static bool commandPromptDone = false;
        public static bool uacDone = false;
        public static bool exeIconsDone = false;
        public static bool TxtIconsDone = false;
        public static bool shellKeyDone = false;
        public static bool userinitKeyDone = false;
        public static bool removeKeyboardRestrictionsDone = false;
        public Form2()
        {
            InitializeComponent();
            panel1.Hide();
            panel2.Hide();
            panel3.Hide();
            goodToGo.Hide();
            RegistryKey checkwindowsversion = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion");
            if (Convert.ToInt32(checkwindowsversion.GetValue("CurrentBuildNumber")) < 21390)
            {
                loadingText.Font = new Font("Segoe UI", 15);
                title.Font = new Font("Segoe UI", 15);
                title2.Font = new Font("Segoe UI Semilight", 10);
                goodToGo.Font = new Font("Segoe UI", 15);
                fixList.Font = new Font("Segoe UI", 12);
                applyFix.Font = new Font("Segoe UI", 10);
                label3.Font = new Font("Segoe UI", 15);
                success.Font = new Font("Segoe UI", 15);
                button1.Font = new Font("Segoe UI", 10);
            }
            RegistryKey checkdarkmode = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool");
            if ((int)checkdarkmode.GetValue("DarkMode") == 1)
            {
                this.BackColor = System.Drawing.Color.Black;
                panel1.BackColor = System.Drawing.Color.Black;
                panel2.BackColor = System.Drawing.Color.Black;
                panel3.BackColor = System.Drawing.Color.Black;
                loadingText.ForeColor = System.Drawing.Color.White;
                fixList.BackColor = System.Drawing.Color.Black;
                title.ForeColor = System.Drawing.Color.White;
                title2.ForeColor = System.Drawing.Color.White;
                goodToGo.ForeColor = System.Drawing.Color.White;
                fixList.ForeColor = System.Drawing.Color.White;
                label3.ForeColor = System.Drawing.Color.White;
                success.ForeColor = System.Drawing.Color.White;
            }
                Main2();
        }
        private async void Main2()
        {
            List<string> list = new List<string>();



            fixList.Items.Clear();
            //Registry Editor Check
            try
            {
                RegistryKey checkregistryeditor = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System");
                if ((int)checkregistryeditor.GetValue("DisableRegistryTools") == 1)
                {
                    fixList.Items.Add("Re-enable Registry Editor");
                }
            } 
            catch{}



            //Task Manager Check 
            try
            {
                RegistryKey checktaskmanager = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System");
                if ((int)checktaskmanager.GetValue("DisableTaskMgr") == 1)
                {
                    fixList.Items.Add("Re-enable Task Manager");
                }
            }
            catch {}


            //Command Prompt Check
            try
            {
                RegistryKey checkcmd = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Policies\Microsoft\Windows\System");
                if((int)checkcmd.GetValue("DisableCMD") != 0)
                {
                    fixList.Items.Add("Re-enable Command Prompt");
                }
            } catch {}



            //User Account Control Check
            try
            {
                RegistryKey checkuac = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System");
                if((int)checkuac.GetValue("EnableLUA") == 0 || (int)checkuac.GetValue("ConsentPromptBehaviorUser") == 0 || (int)checkuac.GetValue("ConsentPromptBehaviorAdmin") == 0)
                {
                    fixList.Items.Add("Re-enable User Account Control");
                }
            } catch {}



            //Exe icons check
            try
            {
                RegistryKey checkexeicons = Registry.ClassesRoot.OpenSubKey(@"exefile\DefaultIcon");
                if((string)checkexeicons.GetValue("") != "%1")
                {
                    fixList.Items.Add("Reset exe icons");
                }
            }
            catch {}



            //Txt icons check
            try
            {
                RegistryKey checktxticons = Registry.ClassesRoot.OpenSubKey(@"txtfile\DefaultIcon");
                if(Convert.ToString(checktxticons.GetValue("")) != @"""%systemroot%\system32\imageres.dll,-102""")
                {
                    fixList.Items.Add("Reset txt icons");
                }
            }
            catch {}



            //Shell key check
            try
            {
                RegistryKey checkshellkey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon");
                if((string)checkshellkey.GetValue("Shell") != "explorer.exe")
                {
                    fixList.Items.Add("Reset Shell key");
                }
            }
            catch {}



            //Userinit key check
            try
            {
                RegistryKey checkuserinitkey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon");
                if((string)checkuserinitkey.GetValue("Userinit") != @"c:\windows\system32\userinit.exe,")
                {
                    fixList.Items.Add("Reset Userinit key");
                }
            }
            catch {}



            //Keyboard lock check
            try
            {
                RegistryKey checkkeyboardlock = Registry.LocalMachine.OpenSubKey(@"SYSTEM\CurrentControlSet\Control\Keyboard Layout");
                if(checkkeyboardlock.GetValue("Scancode Map") != null)
                {
                    fixList.Items.Add("Remove keyboard restrictions");
                }
            }
            catch {}



            //Add stuff to checkboxlist
            await Delay(5000); //time waster until i find a way to add an actual loading screen
            if(fixList.Items.Count == 0)
            {
                goodToGo.Show();
                applyFix.Enabled = false;
            } else
            {
                for (int i = 0; i < fixList.Items.Count; i++)
                {
                    fixList.SetItemChecked(i, true);
                }
            }
            panel1.Show();
        }
        private async Task Delay(int howlong)
        {
            await Task.Delay(howlong);
        }

        private async void applyFix_Click(object sender, EventArgs e)
        {
            EnableMenuItem(GetSystemMenu(this.Handle, false), 0xF060, 1);
            panel2.Show();
            foreach(object itemChecked in fixList.CheckedItems)
            {
                if (itemChecked.ToString() == "Re-enable Registry Editor" && registryEditorDone == false)
                {
                    RegistryKey reenableregistry = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", true);
                    try
                    {
                        reenableregistry.DeleteValue("DisableRegistryTools");
                        reenableregistry.Dispose();
                        registryEditorDone = true;
                    }
                    catch
                    {
                        MessageBox.Show("There was an error performing the requested operation: \nRe-enable Registry Editor", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        this.Close();
                    }
                }
                if(itemChecked.ToString() == "Re-enable Task Manager" && taskManagerDone == false)
                {
                    RegistryKey reenabletaskmanager = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", true);
                    try
                    {
                        reenabletaskmanager.DeleteValue("DisableTaskMgr");
                        reenabletaskmanager.Dispose();
                        taskManagerDone = true;
                    }
                    catch
                    {
                        MessageBox.Show("There was an error performing the requested operation: \nRe-enable Task Manager", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        this.Close();
                    }
                }
                if(itemChecked.ToString() == "Re-enable Command Prompt" && commandPromptDone == false)
                {
                    RegistryKey reenablecmd = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Policies\Microsoft\Windows\System", true);
                    try
                    {
                        reenablecmd.DeleteValue("DisableCMD");
                        reenablecmd.Dispose();
                        commandPromptDone = true;
                    }
                    catch
                    {
                        MessageBox.Show("There was an error performing the requested operation: \nRe-enable Command Prompt", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        this.Close();
                    }
                }
                if(itemChecked.ToString() == "Re-enable User Account Control" && uacDone == false)
                {
                    RegistryKey reenableuac = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", true);
                    try
                    {
                        reenableuac.SetValue("EnableLUA", 1);
                        reenableuac.SetValue("ConsentPromptBehaviorUser", 1);
                        reenableuac.SetValue("ConsentPromptBehaviorAdmin", 5);
                        uacDone = true;
                    }
                    catch
                    {
                        MessageBox.Show("There was an error performing the requested operation: \nRe-enable User Account Control", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        this.Close();
                    }
                }
                if(itemChecked.ToString() == "Reset exe icons" && exeIconsDone == false)
                {
                    var confirmation = MessageBox.Show("Resetting .exe icons requires the clearing of icon cache, which requires restarting explorer. Continue?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                    if (confirmation == DialogResult.Yes)
                    {
                        Process killexplorer = new Process();
                        killexplorer.StartInfo.FileName = "taskkill.exe";
                        killexplorer.StartInfo.Arguments = "/im explorer.exe /f";
                        killexplorer.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        killexplorer.Start();
                        RegistryKey resetexeicons = Registry.ClassesRoot.OpenSubKey(@"exefile\DefaultIcon", true);
                        resetexeicons.SetValue("", "%1");
                        resetexeicons.Dispose();
                        Process deletefiles = new Process();
                        deletefiles.StartInfo.FileName = "cmd.exe";
                        deletefiles.StartInfo.Arguments = @"/c del ""%localappdata%\Microsoft\Windows\Explorer\icon*""";
                        deletefiles.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        deletefiles.Start();
                        await Delay(1000);
                        Process restartexplorer = new Process();
                        restartexplorer.StartInfo.FileName = "cmd.exe";
                        restartexplorer.StartInfo.Arguments = "/c explorer.exe";
                        restartexplorer.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        restartexplorer.Start();
                        exeIconsDone = true;
                    }
                }
                if (itemChecked.ToString() == "Reset txt icons" && TxtIconsDone == false)
                {
                    var confirmation = MessageBox.Show("Resetting .txt icons requires the clearing of icon cache, which requires restarting explorer. Continue?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                    if (confirmation == DialogResult.Yes)
                    {
                        Process killexplorer = new Process();
                        killexplorer.StartInfo.FileName = "taskkill.exe";
                        killexplorer.StartInfo.Arguments = "/im explorer.exe /f";
                        killexplorer.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        killexplorer.Start();
                        RegistryKey resetlnkicons = Registry.ClassesRoot.OpenSubKey(@"txtfile\DefaultIcon", true);
                        resetlnkicons.SetValue("", @"""%systemroot%\system32\imageres.dll,-102""");
                        resetlnkicons.Dispose();
                        Process deletefiles = new Process();
                        deletefiles.StartInfo.FileName = "cmd.exe";
                        deletefiles.StartInfo.Arguments = @"/c del ""%localappdata%\Microsoft\Windows\Explorer\icon*""";
                        deletefiles.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        deletefiles.Start();
                        Process deletefiles2 = new Process();
                        deletefiles2.StartInfo.FileName = "cmd.exe";
                        deletefiles2.StartInfo.Arguments = @"/c del ""%localappdata%\Microsoft\Windows\Explorer\thumb*""";
                        deletefiles2.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        deletefiles2.Start();
                        await Delay(1000);
                        Process restartexplorer = new Process();
                        restartexplorer.StartInfo.FileName = "cmd.exe";
                        restartexplorer.StartInfo.Arguments = "/c explorer.exe";
                        restartexplorer.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        restartexplorer.Start();
                        exeIconsDone = true;
                    }
                }
                if(itemChecked.ToString() == "Reset Shell key" && shellKeyDone == false)
                {
                    RegistryKey resetshellkey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon", true);
                    try
                    {
                        resetshellkey.SetValue("Shell", "explorer.exe");
                        resetshellkey.Dispose();
                        shellKeyDone = true;
                    }
                    catch
                    {
                        MessageBox.Show("There was an error performing the requested operation: \nReset Shell key", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        this.Close();
                    }
                }
                if(itemChecked.ToString() == "Reset Userinit key" && userinitKeyDone == false)
                {
                    RegistryKey resetuserinitkey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon", true);
                    try
                    {
                        resetuserinitkey.SetValue("Userinit", @"c:\windows\system32\userinit.exe,");
                        resetuserinitkey.Dispose();
                        userinitKeyDone = true;
                    }
                    catch
                    {
                        MessageBox.Show("There was an error performing the requested operation: \nReset Userinit key", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        this.Close();
                    }
                }
                if(itemChecked.ToString() == "Remove keyboard restrictions" && removeKeyboardRestrictionsDone == false)
                {
                    try
                    {
                        RegistryKey removekeyboardrestrictions = Registry.LocalMachine.OpenSubKey(@"SYSTEM\CurrentControlSet\Control\Keyboard Layout", true);
                        removekeyboardrestrictions.DeleteValue("Scancode Map");
                        removeKeyboardRestrictionsDone = true;
                    }
                    catch
                    {
                        MessageBox.Show("There was an error performing the requested operation: \nRemove keyboard restrictions", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        this.Close();
                    }
                }
            }
            panel3.Show();
            panel3.BringToFront();
            EnableMenuItem(GetSystemMenu(this.Handle, false), 0xF060, 0);
            if (removeKeyboardRestrictionsDone == true)
            {
                var dialog = MessageBox.Show("A fix that requires a restart has been successfully applied. You will need to restart to see the changes take effect. Restart now?", "Information", MessageBoxButtons.YesNo, MessageBoxIcon.Information);
                if (dialog == DialogResult.Yes)
                {
                    Process restartcomputer = new Process();
                    restartcomputer.StartInfo.FileName = "shutdown.exe";
                    restartcomputer.StartInfo.Arguments = "-r -t 0";
                    restartcomputer.Start();
                }
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            this.Close();
        }
    }
}
