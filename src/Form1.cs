using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Windows_Malware_Effects_Remediation_Tool
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
            RegistryKey checkwindowsversion = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion");
            if (Convert.ToInt32(checkwindowsversion.GetValue("CurrentBuildNumber")) < 21390)
            {
                instructions.Font = new System.Drawing.Font("Segoe UI", 12);
                aboutButton.Font = new System.Drawing.Font("Segoe UI", 10);
                darkModeButton.Font = new System.Drawing.Font("Segoe UI", 10);
                automaticRepairText.Font = new System.Drawing.Font("Segoe UI", 12);
                button1.Font = new System.Drawing.Font("Segoe UI", 10);
                reenableRegistryText.Font = new System.Drawing.Font("Segoe UI", 12);
                reenableRegistry.Font = new System.Drawing.Font("Segoe UI", 10);
                reenableCMDText.Font = new System.Drawing.Font("Segoe UI", 12);
                reenableCommandPrompt.Font = new System.Drawing.Font("Segoe UI", 10);
                reenableTaskManagerText.Font = new System.Drawing.Font("Segoe UI", 12);
                reenableTaskManager.Font = new System.Drawing.Font("Segoe UI", 10);
                reenableUACText.Font = new System.Drawing.Font("Segoe UI", 12);
                reenableUAC.Font = new System.Drawing.Font("Segoe UI", 10);
                stripCriticalProcessText.Font = new System.Drawing.Font("Segoe UI", 12);
                stripCriticalProcessText2.Font = new System.Drawing.Font("Segoe UI", 12);
                stripCriticalProcess.Font = new System.Drawing.Font("Segoe UI", 10);
                resetExeIconsText.Font = new System.Drawing.Font("Segoe UI", 12);
                resetExeIcons.Font = new System.Drawing.Font("Segoe UI", 10);
                resetTxtIconsText.Font = new System.Drawing.Font("Segoe UI", 12);
                resetTxtIcons.Font = new System.Drawing.Font("Segoe UI", 10);
                resetShellKeyText.Font = new System.Drawing.Font("Segoe UI", 12);
                resetShellKey.Font = new System.Drawing.Font("Segoe UI", 10);
                resetUserinitKeyText.Font = new System.Drawing.Font("Segoe UI", 12);
                resetUserinitKey.Font = new System.Drawing.Font("Segoe UI", 10);
                removeKeyboardRestrictionsText.Font = new System.Drawing.Font("Segoe UI", 12);
                removeKeyboardRestrictions.Font = new System.Drawing.Font("Segoe UI", 10);
            }
                RegistryKey setdarkmodepreferences = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool");
            if (setdarkmodepreferences.GetValue("DarkMode") == null)
            {
                setdarkmodepreferences.SetValue("DarkMode", 0);
            }
            if ((int)setdarkmodepreferences.GetValue("DarkMode") == 1)
            {
                setdarkmodepreferences.SetValue("DarkMode", 1);
                BackColor = System.Drawing.Color.Black;
                automaticRepairText.ForeColor = System.Drawing.Color.White;
                reenableRegistryText.ForeColor = System.Drawing.Color.White;
                reenableTaskManagerText.ForeColor = System.Drawing.Color.White;
                reenableCMDText.ForeColor = System.Drawing.Color.White;
                reenableUACText.ForeColor = System.Drawing.Color.White;
                stripCriticalProcessText.ForeColor = System.Drawing.Color.White;
                stripCriticalProcessText2.ForeColor = System.Drawing.Color.White;
                resetExeIconsText.ForeColor = System.Drawing.Color.White;
                resetTxtIconsText.ForeColor = System.Drawing.Color.White;
                resetShellKeyText.ForeColor = System.Drawing.Color.White;
                resetUserinitKeyText.ForeColor = System.Drawing.Color.White;
                removeKeyboardRestrictionsText.ForeColor = System.Drawing.Color.White;
                instructions.ForeColor = System.Drawing.Color.White;
                darkModeButton.Text = "Light Mode";
            }
            else if ((int)setdarkmodepreferences.GetValue("DarkMode") == 0)
            {
                setdarkmodepreferences.SetValue("DarkMode", 0);
                BackColor = System.Drawing.Color.White;
                automaticRepairText.ForeColor = System.Drawing.Color.Black;
                reenableRegistryText.ForeColor = System.Drawing.Color.Black;
                reenableTaskManagerText.ForeColor = System.Drawing.Color.Black;
                reenableCMDText.ForeColor = System.Drawing.Color.Black;
                reenableUACText.ForeColor = System.Drawing.Color.Black;
                stripCriticalProcessText.ForeColor = System.Drawing.Color.Black;
                stripCriticalProcessText2.ForeColor = System.Drawing.Color.Black;
                resetExeIconsText.ForeColor = System.Drawing.Color.Black;
                resetTxtIconsText.ForeColor = System.Drawing.Color.Black;
                resetShellKeyText.ForeColor = System.Drawing.Color.Black;
                resetUserinitKeyText.ForeColor = System.Drawing.Color.Black;
                removeKeyboardRestrictionsText.ForeColor = System.Drawing.Color.Black;
                instructions.ForeColor = System.Drawing.Color.Black;
                darkModeButton.Text = "Dark Mode";
            }
        }
        private void button1_Click(object sender, EventArgs e)
        {
            Form2 form2 = new Form2();
            form2.ShowDialog();
        }

        private async Task Delay(int howlong)
        {
            await Task.Delay(howlong);
        }

        private void reenableRegistry_Click(object sender, EventArgs e)
        {
            RegistryKey reenableregistry = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", true);
            try 
            {
                reenableregistry.DeleteValue("DisableRegistryTools");
                reenableregistry.Dispose();
                MessageBox.Show("The Registry Editor has been successfully re-enabled.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            } catch 
            {
                MessageBox.Show("There was an error re-enabling the Registry Editor. Was it even disabled in the first place? Do I have sufficient permissions?", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void reenableTaskManager_Click(object sender, EventArgs e)
        {
            RegistryKey reenabletaskmanager = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", true);
            try
            {
                reenabletaskmanager.DeleteValue("DisableTaskMgr");
                reenabletaskmanager.Dispose();
                MessageBox.Show("Task Manager has been successfully re-enabled.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch
            {
                MessageBox.Show("There was an error re-enabling Task Manager. Was it even disabled in the first place? Do I have sufficient permissions?", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void reenableCommandPrompt_Click(object sender, EventArgs e)
        {
            RegistryKey reenablecmd = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Policies\Microsoft\Windows\System", true);
            try
            {
                reenablecmd.DeleteValue("DisableCMD");
                reenablecmd.Dispose();
                MessageBox.Show("The Command Prompt has been successfully re-enabled.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch
            {
                MessageBox.Show("There was an error re-enabling the Command Prompt. Was it even disabled in the first place? Do I have sufficient permissions?", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void stripCriticalProcess_Click(object sender, EventArgs e)
        {
            Form3 form3 = new Form3();
            form3.ShowDialog();
        }

        private async void resetExeIcons_Click(object sender, EventArgs e)
        {
            var confirmation = MessageBox.Show("Resetting .exe icons requires the clearing of icon cache, which requires restarting explorer. Continue?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
            if(confirmation == DialogResult.Yes)
            {
                Process killexplorer = new Process();
                killexplorer.StartInfo.FileName = "taskkill.exe";
                killexplorer.StartInfo.Arguments = "/im explorer.exe /f";
                killexplorer.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                killexplorer.Start();
                RegistryKey resetexeicons = Registry.ClassesRoot.OpenSubKey(@"exefile\DefaultIcon", true);
                resetexeicons.SetValue("", "%1");
                resetexeicons.Dispose();
                Process deletefiles = new Process();
                deletefiles.StartInfo.FileName = "cmd.exe";
                deletefiles.StartInfo.Arguments = @"/c del ""%localappdata%\Microsoft\Windows\Explorer\icon*""";
                deletefiles.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                deletefiles.Start();
                await Delay(1000);
                Process restartexplorer = new Process();
                restartexplorer.StartInfo.FileName = "cmd.exe";
                restartexplorer.StartInfo.Arguments = "/c explorer.exe";
                restartexplorer.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                restartexplorer.Start();
            }
        }

        private async void resetTxtIcons_Click(object sender, EventArgs e)
        {
            var confirmation = MessageBox.Show("Resetting .txt icons requires the clearing of icon cache, which requires restarting explorer. Continue?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
            if (confirmation == DialogResult.Yes)
            {
                Process killexplorer = new Process();
                killexplorer.StartInfo.FileName = "taskkill.exe";
                killexplorer.StartInfo.Arguments = "/im explorer.exe /f";
                killexplorer.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                killexplorer.Start();
                RegistryKey resetlnkicons = Registry.ClassesRoot.OpenSubKey(@"txtfile\DefaultIcon", true);
                resetlnkicons.SetValue("", @"""%systemroot%\system32\imageres.dll,-102""");
                resetlnkicons.Dispose();
                Process deletefiles = new Process();
                deletefiles.StartInfo.FileName = "cmd.exe";
                deletefiles.StartInfo.Arguments = @"/c del ""%localappdata%\Microsoft\Windows\Explorer\icon*""";
                deletefiles.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                deletefiles.Start();
                Process deletefiles2 = new Process();
                deletefiles2.StartInfo.FileName = "cmd.exe";
                deletefiles2.StartInfo.Arguments = @"/c del ""%localappdata%\Microsoft\Windows\Explorer\thumb*""";
                deletefiles2.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                deletefiles2.Start();
                await Delay(1000);
                Process restartexplorer = new Process();
                restartexplorer.StartInfo.FileName = "cmd.exe";
                restartexplorer.StartInfo.Arguments = "/c explorer.exe";
                restartexplorer.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                restartexplorer.Start();
            }
        }

        private void resetShellKey_Click(object sender, EventArgs e)
        {
            RegistryKey resetshellkey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon", true);
            try
            {
                resetshellkey.SetValue("Shell", "explorer.exe");
                resetshellkey.Dispose();
                MessageBox.Show("The Shell key has successfully been reset.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch
            {
                MessageBox.Show("There was an error resetting the Shell key. Do I have sufficient permissions?", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void resetUserinitKey_Click(object sender, EventArgs e)
        {
            RegistryKey resetuserinitkey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon", true);
            try
            {
                resetuserinitkey.SetValue("Userinit", @"c:\windows\system32\userinit.exe,");
                resetuserinitkey.Dispose();
                MessageBox.Show("The Userinit key has successfully been reset.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch
            {
                MessageBox.Show("There was an error resetting the Userinit key. Do I have sufficient permissions?", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void reenableUAC_Click(object sender, EventArgs e)
        {
            RegistryKey reenableuac = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", true);
            try
            {
                reenableuac.SetValue("EnableLUA", 1);
                reenableuac.SetValue("ConsentPromptBehaviorUser", 1);
                reenableuac.SetValue("ConsentPromptBehaviorAdmin", 5);
                MessageBox.Show("User Account Control has been re-enabled successfully.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            } 
            catch
            {
                MessageBox.Show("There was an error re-enabling User Account Control. Do I have sufficient permissions?", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private async void aboutButton_Click(object sender, EventArgs e)
        {
            Directory.CreateDirectory(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\Orange Group\Windows Malware Effects Remediation Tool");
            File.WriteAllBytes(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\Orange Group\Windows Malware Effects Remediation Tool\MERTAbout.exe", Properties.Resources.MERTAbout);
            await Delay(100);
            Process aboutwindow = new Process();
            aboutwindow.StartInfo.FileName = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\Orange Group\Windows Malware Effects Remediation Tool\MERTAbout.exe";
            aboutwindow.Start();
        }

        private void darkModeButton_Click(object sender, EventArgs e)
        {
            RegistryKey setdarkmodepreferences = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Orange Group\Windows Malware Effects Remediation Tool");
            if (setdarkmodepreferences.GetValue("DarkMode") == null || (int)setdarkmodepreferences.GetValue("DarkMode") == 0)
            {
                setdarkmodepreferences.SetValue("DarkMode", 1);
                BackColor = System.Drawing.Color.Black;
                automaticRepairText.ForeColor = System.Drawing.Color.White;
                reenableRegistryText.ForeColor = System.Drawing.Color.White;
                reenableTaskManagerText.ForeColor = System.Drawing.Color.White;
                reenableCMDText.ForeColor = System.Drawing.Color.White;
                reenableUACText.ForeColor = System.Drawing.Color.White;
                stripCriticalProcessText.ForeColor = System.Drawing.Color.White;
                stripCriticalProcessText2.ForeColor = System.Drawing.Color.White;
                resetExeIconsText.ForeColor = System.Drawing.Color.White;
                resetTxtIconsText.ForeColor = System.Drawing.Color.White;
                resetShellKeyText.ForeColor = System.Drawing.Color.White;
                resetUserinitKeyText.ForeColor = System.Drawing.Color.White;
                removeKeyboardRestrictionsText.ForeColor = System.Drawing.Color.White;
                instructions.ForeColor = System.Drawing.Color.White;
                darkModeButton.Text = "Light Mode";
            }
            else
            {
                setdarkmodepreferences.SetValue("DarkMode", 0);
                BackColor = System.Drawing.Color.White;
                automaticRepairText.ForeColor = System.Drawing.Color.Black;
                reenableRegistryText.ForeColor = System.Drawing.Color.Black;
                reenableTaskManagerText.ForeColor = System.Drawing.Color.Black;
                reenableCMDText.ForeColor = System.Drawing.Color.Black;
                reenableUACText.ForeColor = System.Drawing.Color.Black;
                stripCriticalProcessText.ForeColor = System.Drawing.Color.Black;
                stripCriticalProcessText2.ForeColor = System.Drawing.Color.Black;
                resetExeIconsText.ForeColor = System.Drawing.Color.Black;
                resetTxtIconsText.ForeColor = System.Drawing.Color.Black;
                resetShellKeyText.ForeColor = System.Drawing.Color.Black;
                resetUserinitKeyText.ForeColor = System.Drawing.Color.Black;
                removeKeyboardRestrictionsText.ForeColor = System.Drawing.Color.Black;
                instructions.ForeColor = System.Drawing.Color.Black;
                darkModeButton.Text = "Dark Mode";
            }
        }

        private void removeKeyboardRestrictions_Click(object sender, EventArgs e)
        {
            try
            {
                RegistryKey removekeyboardrestrictions = Registry.LocalMachine.OpenSubKey(@"SYSTEM\CurrentControlSet\Control\Keyboard Layout");
                removekeyboardrestrictions.DeleteValue("ScancodeMap");
                var dialog = MessageBox.Show("Successfully removed the keyboard restrictions. However, you will need to restart to see the changes take effect. Restart now?", "Information", MessageBoxButtons.YesNo, MessageBoxIcon.Information);
                if(dialog == DialogResult.Yes)
                {
                    Process restartcomputer = new Process();
                    restartcomputer.StartInfo.FileName = "shutdown.exe";
                    restartcomputer.StartInfo.Arguments = "-r -t 0";
                    restartcomputer.Start();
                }
            } 
            catch
            {
                MessageBox.Show("Error removing keyboard restrictions. Were the restrictions even in place at the start?", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }
}
