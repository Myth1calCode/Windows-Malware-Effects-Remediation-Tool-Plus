using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Windows_Malware_Effects_Remediation_Tool
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
            separateDriveTextBox.Enabled = false;
        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void vScrollBar1_Scroll(object sender, ScrollEventArgs e)
        {

        }

        private async void button1_Click(object sender, EventArgs e)
        {
            this.Hide();
            await Delay(200);
            Form2 form2 = new Form2();
            form2.Show();
        }

        private async Task Delay(int howlong)
        {
            await Task.Delay(howlong);
        }

        private void reenableRegistry_Click(object sender, EventArgs e)
        {
            RegistryKey reenableregistry = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", true);
            try 
            {
                reenableregistry.DeleteValue("DisableRegistryTools");
                reenableregistry.Dispose();
                MessageBox.Show("The Registry Editor has been successfully re-enabled.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            } catch 
            {
                MessageBox.Show("There was an error re-enabling the Registry Editor. Was it even disabled in the first place? Do I have sufficient permissions?", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void reenableTaskManager_Click(object sender, EventArgs e)
        {
            RegistryKey reenabletaskmanager = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", true);
            try
            {
                reenabletaskmanager.DeleteValue("DisableTaskMgr");
                reenabletaskmanager.Dispose();
                MessageBox.Show("Task Manager has been successfully re-enabled.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch
            {
                MessageBox.Show("There was an error re-enabling Task Manager. Was it even disabled in the first place? Do I have sufficient permissions?", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void reenableCommandPrompt_Click(object sender, EventArgs e)
        {
            RegistryKey reenablecmd = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Policies\Microsoft\Windows\System", true);
            try
            {
                reenablecmd.DeleteValue("DisableCMD");
                reenablecmd.Dispose();
                MessageBox.Show("The Command Prompt has been successfully re-enabled.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch
            {
                MessageBox.Show("There was an error re-enabling the Command Prompt. Was it even disabled in the first place? Do I have sufficient permissions?", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void stripCriticalProcess_Click(object sender, EventArgs e)
        {
            Form3 form3 = new Form3();
            form3.ShowDialog();
        }

        private void resetExeIcons_Click(object sender, EventArgs e)
        {
            var confirmation = MessageBox.Show("Resetting .exe icons requires the clearing of icon cache, which requires restarting explorer. Continue?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
            if(confirmation == DialogResult.Yes)
            {
                Process killexplorer = new Process();
                killexplorer.StartInfo.FileName = "taskkill.exe";
                killexplorer.StartInfo.Arguments = "/im explorer.exe /f";
                killexplorer.Start();
                RegistryKey resetexeicons = Registry.ClassesRoot.OpenSubKey(@"exefile\DefaultIcon", true);
                resetexeicons.SetValue("", "%1");
                resetexeicons.Dispose();
                Process deletefiles = new Process();
                deletefiles.StartInfo.FileName = "cmd.exe";
                deletefiles.StartInfo.Arguments = @"/c del ""%localappdata%\Microsoft\Windows\Explorer\icon*""";
                deletefiles.Start();
                Process restartexplorer = new Process();
                restartexplorer.StartInfo.FileName = "explorer.exe";
                restartexplorer.Start();
            }
        }

        private void resetLnkIcons_Click(object sender, EventArgs e)
        {
            var confirmation = MessageBox.Show("Resetting .exe icons requires the clearing of icon cache, which requires restarting explorer. Continue?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
            if (confirmation == DialogResult.Yes)
            {
                Process killexplorer = new Process();
                killexplorer.StartInfo.FileName = "taskkill.exe";
                killexplorer.StartInfo.Arguments = "/im explorer.exe /f";
                killexplorer.Start();
                RegistryKey resetlnkicons = Registry.ClassesRoot.OpenSubKey(@"exefile\DefaultIcon", true);
                resetlnkicons.SetValue("", @"""%systemroot%\System32\imageres.dll,-102""");
                resetlnkicons.Dispose();
                Process deletefiles = new Process();
                deletefiles.StartInfo.FileName = "cmd.exe";
                deletefiles.StartInfo.Arguments = @"/c del ""%localappdata%\Microsoft\Windows\Explorer\icon*""";
                deletefiles.Start();
                Process deletefiles2 = new Process();
                deletefiles2.StartInfo.FileName = "cmd.exe";
                deletefiles2.StartInfo.Arguments = @"/c del ""%localappdata%\Microsoft\Windows\Explorer\thumb*""";
                deletefiles2.Start();
                Process restartexplorer = new Process();
                restartexplorer.StartInfo.FileName = "explorer.exe";
                restartexplorer.Start();
            }
        }

        private void seperateDriveCheckbox_CheckedChanged(object sender, EventArgs e)
        {
            if(separateDriveCheckbox.Checked == true)
            {
                stripCriticalProcess.Enabled = false;
                separateDriveTextBox.Enabled = true;
            } else
            {
                stripCriticalProcess.Enabled = true;
                separateDriveTextBox.Enabled = false;
            }
        }

        private void separateDriveTextBox_TextChanged(object sender, EventArgs e)
        {
            string allowedChar = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
            if (!separateDriveTextBox.Text.ToString().All(allowedChar.Contains) || separateDriveTextBox.Text.Length > 1)
            {
                MessageBox.Show("Drive letters should only contain a single letter. For example, the X: drive should be written as \"X\".", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                separateDriveTextBox.ResetText();
            }
        }

        private void resetTxtIcons_Click(object sender, EventArgs e)
        {
            var confirmation = MessageBox.Show("Resetting .exe icons requires the clearing of icon cache, which requires restarting explorer. Continue?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
            if (confirmation == DialogResult.Yes)
            {
                Process killexplorer = new Process();
                killexplorer.StartInfo.FileName = "taskkill.exe";
                killexplorer.StartInfo.Arguments = "/im explorer.exe /f";
                killexplorer.Start();
                RegistryKey resetlnkicons = Registry.ClassesRoot.OpenSubKey(@"exefile\DefaultIcon", true);
                resetlnkicons.SetValue("", @"""%systemroot%\System32\imageres.dll,-102""");
                resetlnkicons.Dispose();
                Process deletefiles = new Process();
                deletefiles.StartInfo.FileName = "cmd.exe";
                deletefiles.StartInfo.Arguments = @"/c del ""%localappdata%\Microsoft\Windows\Explorer\icon*""";
                deletefiles.Start();
                Process deletefiles2 = new Process();
                deletefiles2.StartInfo.FileName = "cmd.exe";
                deletefiles2.StartInfo.Arguments = @"/c del ""%localappdata%\Microsoft\Windows\Explorer\thumb*""";
                deletefiles2.Start();
                Process restartexplorer = new Process();
                restartexplorer.StartInfo.FileName = "explorer.exe";
                restartexplorer.Start();
            }
        }

        private void resetShellKey_Click(object sender, EventArgs e)
        {
            RegistryKey resetshellkey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon", true);
            try
            {
                resetshellkey.SetValue("Shell", "explorer.exe");
                resetshellkey.Dispose();
                MessageBox.Show("The Shell key has successfully been reset.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch
            {
                MessageBox.Show("There was an error resetting the Shell key. Do I have sufficient permissions?", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }
}
